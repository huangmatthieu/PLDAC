package lfi.fuzzy.ffs.factories;

/**
 * 
 * Factorie de Quantificateur
 * 
 * @author David
 *
 */

import lfi.fuzzy.ffs.FFS;
import lfi.fuzzy.general.SFS;
import lfi.fuzzy.general.Trapezoid;
import lfi.fuzzy.general.ZFS;
import lfi.fuzzy.lingvar.QType;
import lfi.fuzzy.lingvar.Quantifier;
 
public class QuantFact {
	private static int qi=1;
	public static Quantifier build(String spec) throws Exception{
		String separateur;
		if(FFS.dataFormat.equals("EN"))
			separateur = ",";
		else
			separateur = ";";
		String[] format=spec.split(separateur);				
		Quantifier q=new Quantifier();
			if(format[0].equals("")){
			q.setName("Q_"+qi);
			qi++;
		}else{
		q.setName(format[0]);
		}
	switch(format[1]){		 
	case "R":
		q.setType(QType.RELATIVE);				 
		break;
	 case "A":
		 q.setType(QType.ABSOLUTE);
		break;
	 
	 default:
		 throw new Exception("Type inconnu");
	 }
	switch(format[2]){
	case "S":
		String[] valeur=format[3].split("[|]");
		q.setFs(new SFS(Double.parseDouble(valeur[0]),Double.parseDouble(valeur[1])));
	break;
	case "Z":
		String[] valeur1=format[3].split("[|]");
		q.setFs(new ZFS(Double.parseDouble(valeur1[0]),Double.parseDouble(valeur1[1])));
		break;
	case "T":
		String[] valeur11=format[3].split("[|]");
		q.setFs(new Trapezoid(Double.parseDouble(valeur11[0]),Double.parseDouble(valeur11[0]),Double.parseDouble(valeur11[0]),Double.parseDouble(valeur11[0])));
		break;
	default :
		throw new Exception("forme inconnue");
	}
	return q;
}
}