package lfi.fuzzy.partitions;

import java.util.ArrayList;

/**
 * Définit une partition de Ruspini à l'aide de key points.<br />
 * Si par exemple la partition est composée des trapèzes
 * <ul>
 * <li>Petit: (0,1)-(100,1)-(140,0)</li>
 * <li>Moyen: (100,0)-(140,1)-(160,1)-(180,0)</li>
 * <li>Grand: (160,0)-(180,1)-(200,1)</li>
 * </ul>
 * alors les points clés sont 100, 140, 160, 180. <br/>
 * En interne, les points clés sont stockés sous forme de ArrayList<Double>
 * 
 * @author LIP6 / LFI
 *
 */
public class Ruspini extends FuzzyPart {
	private ArrayList<Double> keyPoints = new ArrayList<Double>();

	/**
	 * Accesseur en lecture des keyPoints
	 * 
	 * @return key points
	 */
	public ArrayList<Double> getKeyPoints() {
		return keyPoints;
	}

	/**
	 * Accesseur en écriture des keypPoints
	 * 
	 * @param k
	 */
	public void setKeyPoints(ArrayList<Double> k) {
		keyPoints = k;
	}

	/**
	 * Renvoie l'appartenance de x à une partition de Ruspinin définie en points
	 * clés
	 * 
	 * @see lfi.fuzzy.partitions.FuzzyPart#mShip(double)
	 */
	public MShips mShip(double x) {
		int leftId, rightId;
		int i;

		if (x < keyPoints.get(0))  // si x < première modalté
			return result.fill1Mod(1, 1);
		else if (x > keyPoints.get(m)) // si x > dernière modalité
			return result.fill1Mod(m, 1);
		else { // autre cas
			leftId = 1;
			rightId = 2 * (m - 1);
			i = (int) Math.floor((rightId - leftId) / 2);
	
			while ((x < keyPoints.get(i - 1)) || (x > keyPoints.get(i))) {
				if (x < keyPoints.get(i - 1)) rightId = i;
				else leftId = i;
				i = (int) Math.floor(((rightId - leftId) / 2));
			}
	
			if ((i % 2) == 0) return result.fill1Mod(i / 2, 1);
			else return result.fill1Mod((i+1) / 2, (keyPoints.get(i+1) - x) / (keyPoints.get(i+1) - keyPoints.get(i )));
		}
	}
}
